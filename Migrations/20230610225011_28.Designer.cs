// <auto-generated />
using System;
using CharacterManager.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharacterManager.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230610225011_28")]
    partial class _28
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharacterManager.Models.AbilityScore", b =>
                {
                    b.Property<Guid>("AbilityScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassFeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("AbilityScoreId");

                    b.ToTable("AbilityScores", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.Character", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("AbilityScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("CharacterId");

                    b.HasIndex("AbilityScoreId");

                    b.HasIndex("GameId");

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.Class", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("ClassLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasDefaultValue("");

                    b.Property<int>("HitDie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("ClassId");

                    b.ToTable("Classes", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.ClassFeat", b =>
                {
                    b.Property<Guid>("ClassFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("AbilityScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasDefaultValue("");

                    b.Property<int>("LevelRequirement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("ClassFeatId");

                    b.HasIndex("AbilityScoreId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassFeats", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.ErrorViewModel", b =>
                {
                    b.Property<string>("ErrorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ErrorId");

                    b.ToTable("ErrorViewModels");
                });

            modelBuilder.Entity("CharacterManager.Models.Feat", b =>
                {
                    b.Property<Guid>("FeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("AbilityScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Prerequisite")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("FeatId");

                    b.HasIndex("AbilityScoreId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Feats", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("GameId");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("AbilityScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Attunement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasDefaultValue("");

                    b.Property<bool>("Magic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("ItemId");

                    b.HasIndex("AbilityScoreId");

                    b.ToTable("Items", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.CharacterClass", b =>
                {
                    b.Property<Guid>("CharacterClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CharacterClassId");

                    b.ToTable("CharacterClass");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.ClassJoins.ClassSavingThrow", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SavingThrowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassId", "SavingThrowId");

                    b.HasIndex("SavingThrowId");

                    b.ToTable("ClassSavingThrows", "join");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.ClassJoins.ClassSkill", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ClassSkills", "join");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.RaceJoins.AbilityScoreCharacter", b =>
                {
                    b.Property<Guid>("AbilityScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AbilityScoreId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("AbilityScoreCharacters", "join");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.RaceJoins.AbilityScoreClassFeat", b =>
                {
                    b.Property<Guid>("AbilityScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassFeatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AbilityScoreId", "ClassFeatId");

                    b.HasIndex("ClassFeatId");

                    b.ToTable("AbilityScoreClassFeats", "join");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.RaceJoins.AbilityScoreFeat", b =>
                {
                    b.Property<Guid>("AbilityScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AbilityScoreId", "FeatId");

                    b.HasIndex("FeatId");

                    b.ToTable("AbilityScoreFeats", "join");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.RaceJoins.AbilityScoreItem", b =>
                {
                    b.Property<Guid>("AbilityScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AbilityScoreId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("AbilityScoreItems", "join");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.RaceJoins.AbilityScoreRace", b =>
                {
                    b.Property<Guid>("AbilityScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AbilityScoreId", "RaceId");

                    b.HasIndex("RaceId");

                    b.ToTable("AbilityScoreRaces", "join");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.RaceJoins.RaceLanguage", b =>
                {
                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RaceId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("RaceLanguages", "join");
                });

            modelBuilder.Entity("CharacterManager.Models.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Script")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("TypicalSpeakers")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.Race", b =>
                {
                    b.Property<Guid>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Ability")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<Guid?>("AbilityScoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Size")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Speed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("RaceId");

                    b.HasIndex("AbilityScoreId");

                    b.ToTable("Races", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.SavingThrow", b =>
                {
                    b.Property<Guid>("SavingThrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("SavingThrowId");

                    b.ToTable("SavingThrows", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.Skill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("SkillId");

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.Spell", b =>
                {
                    b.Property<Guid>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CastingTime")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Components")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<bool>("Concentration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasDefaultValue("");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Materials")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Range")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<int>("SaveDC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("School")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("SpellLists")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Upcast")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasDefaultValue("");

                    b.HasKey("SpellId");

                    b.ToTable("Spells", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.SubClass", b =>
                {
                    b.Property<Guid>("SubClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("SubClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("SubClasses", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.Armor", b =>
                {
                    b.HasBaseType("CharacterManager.Models.Item");

                    b.Property<int>("AC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.ToTable("Armor", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.Weapon", b =>
                {
                    b.HasBaseType("CharacterManager.Models.Item");

                    b.Property<int>("Bonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DieSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("MaxRange")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<int>("NumberOfDie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Range")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.ToTable("Weapons", (string)null);
                });

            modelBuilder.Entity("CharacterManager.Models.Character", b =>
                {
                    b.HasOne("CharacterManager.Models.AbilityScore", null)
                        .WithMany("Characters")
                        .HasForeignKey("AbilityScoreId");

                    b.HasOne("CharacterManager.Models.Game", "Game")
                        .WithMany("Characters")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("CharacterManager.Models.ClassFeat", b =>
                {
                    b.HasOne("CharacterManager.Models.AbilityScore", null)
                        .WithMany("ClassFeats")
                        .HasForeignKey("AbilityScoreId");

                    b.HasOne("CharacterManager.Models.Class", "Class")
                        .WithMany("ClassFeats")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("CharacterManager.Models.Feat", b =>
                {
                    b.HasOne("CharacterManager.Models.AbilityScore", null)
                        .WithMany("Feats")
                        .HasForeignKey("AbilityScoreId");

                    b.HasOne("CharacterManager.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("CharacterManager.Models.Item", b =>
                {
                    b.HasOne("CharacterManager.Models.AbilityScore", null)
                        .WithMany("Items")
                        .HasForeignKey("AbilityScoreId");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.ClassJoins.ClassSavingThrow", b =>
                {
                    b.HasOne("CharacterManager.Models.Class", "Class")
                        .WithMany("ClassSavingThrows")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.SavingThrow", "SavingThrow")
                        .WithMany("ClassSavingThrows")
                        .HasForeignKey("SavingThrowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("SavingThrow");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.ClassJoins.ClassSkill", b =>
                {
                    b.HasOne("CharacterManager.Models.Class", "Class")
                        .WithMany("ClassSkills")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Skill", "Skill")
                        .WithMany("ClassSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.RaceJoins.AbilityScoreCharacter", b =>
                {
                    b.HasOne("CharacterManager.Models.AbilityScore", "AbilityScore")
                        .WithMany("ASC")
                        .HasForeignKey("AbilityScoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Character", "Character")
                        .WithMany("ASC")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AbilityScore");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.RaceJoins.AbilityScoreClassFeat", b =>
                {
                    b.HasOne("CharacterManager.Models.AbilityScore", "AbilityScore")
                        .WithMany("AbilityScoreClassFeats")
                        .HasForeignKey("AbilityScoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.ClassFeat", "ClassFeat")
                        .WithMany("AbilityScoreClassFeats")
                        .HasForeignKey("ClassFeatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AbilityScore");

                    b.Navigation("ClassFeat");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.RaceJoins.AbilityScoreFeat", b =>
                {
                    b.HasOne("CharacterManager.Models.AbilityScore", "AbilityScore")
                        .WithMany("AbilityScoreFeats")
                        .HasForeignKey("AbilityScoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Feat", "Feat")
                        .WithMany("AbilityScoreFeats")
                        .HasForeignKey("FeatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AbilityScore");

                    b.Navigation("Feat");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.RaceJoins.AbilityScoreItem", b =>
                {
                    b.HasOne("CharacterManager.Models.AbilityScore", "AbilityScore")
                        .WithMany("AbilityScoreItems")
                        .HasForeignKey("AbilityScoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Item", "Item")
                        .WithMany("AbilityScoreItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AbilityScore");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.RaceJoins.AbilityScoreRace", b =>
                {
                    b.HasOne("CharacterManager.Models.AbilityScore", "AbilityScore")
                        .WithMany("AbilityScoreRaces")
                        .HasForeignKey("AbilityScoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Race", "Race")
                        .WithMany("AbilityScoreRaces")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AbilityScore");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("CharacterManager.Models.JoinModels.RaceJoins.RaceLanguage", b =>
                {
                    b.HasOne("CharacterManager.Models.Language", "Language")
                        .WithMany("RaceLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Race", "Race")
                        .WithMany("RaceLanguages")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("CharacterManager.Models.Race", b =>
                {
                    b.HasOne("CharacterManager.Models.AbilityScore", null)
                        .WithMany("Races")
                        .HasForeignKey("AbilityScoreId");
                });

            modelBuilder.Entity("CharacterManager.Models.SubClass", b =>
                {
                    b.HasOne("CharacterManager.Models.Class", "Class")
                        .WithMany("SubClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("CharacterManager.Models.Armor", b =>
                {
                    b.HasOne("CharacterManager.Models.Item", null)
                        .WithOne()
                        .HasForeignKey("CharacterManager.Models.Armor", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManager.Models.Weapon", b =>
                {
                    b.HasOne("CharacterManager.Models.Item", null)
                        .WithOne()
                        .HasForeignKey("CharacterManager.Models.Weapon", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManager.Models.AbilityScore", b =>
                {
                    b.Navigation("ASC");

                    b.Navigation("AbilityScoreClassFeats");

                    b.Navigation("AbilityScoreFeats");

                    b.Navigation("AbilityScoreItems");

                    b.Navigation("AbilityScoreRaces");

                    b.Navigation("Characters");

                    b.Navigation("ClassFeats");

                    b.Navigation("Feats");

                    b.Navigation("Items");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("CharacterManager.Models.Character", b =>
                {
                    b.Navigation("ASC");
                });

            modelBuilder.Entity("CharacterManager.Models.Class", b =>
                {
                    b.Navigation("ClassFeats");

                    b.Navigation("ClassSavingThrows");

                    b.Navigation("ClassSkills");

                    b.Navigation("SubClasses");
                });

            modelBuilder.Entity("CharacterManager.Models.ClassFeat", b =>
                {
                    b.Navigation("AbilityScoreClassFeats");
                });

            modelBuilder.Entity("CharacterManager.Models.Feat", b =>
                {
                    b.Navigation("AbilityScoreFeats");
                });

            modelBuilder.Entity("CharacterManager.Models.Game", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("CharacterManager.Models.Item", b =>
                {
                    b.Navigation("AbilityScoreItems");
                });

            modelBuilder.Entity("CharacterManager.Models.Language", b =>
                {
                    b.Navigation("RaceLanguages");
                });

            modelBuilder.Entity("CharacterManager.Models.Race", b =>
                {
                    b.Navigation("AbilityScoreRaces");

                    b.Navigation("RaceLanguages");
                });

            modelBuilder.Entity("CharacterManager.Models.SavingThrow", b =>
                {
                    b.Navigation("ClassSavingThrows");
                });

            modelBuilder.Entity("CharacterManager.Models.Skill", b =>
                {
                    b.Navigation("ClassSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
